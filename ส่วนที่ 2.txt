ส่วนที่ 2
1. ให้อธิบายว่าจะใช้วิธีการอะไรได้บ้างในการป้องกัน brute
force attack หรือเดารหัสผ่านใน login form

Ans.
 - CAPTCHAs
 - Two-Factor Authentication
 - ใช้รหัสผ่านที่ใช้เวลาสุ่มนาน เช่น ต้องประกอบไปด้วย ตัวอักษรพิมพ์เล็ก 
  ตัวอักษรพิมพ์ใหญ่ อักขระพิเศษ ตัวเลข และมีอย่างน้อย 8 ตัวอักษร
 - จำกัดจำนวนครั้งในการ login
 - เก็บ log การ login ถ้า ip address ที่มีความถี่ในการล็อกอินมากกว่าที่กำหนดไว้ก็ให้ ban ip ไม่ให้ login ได้

***********************************************************
2. จงเขียนตัวอย่าง sql query ในโค้ด โดยให้มีชุดคำสั่ง
ที่ช่วยป้องกัน sql injection (ตั้งชื่อตารางชื่อฟิลด์ด้วยตัวเองได้เลย)
$inputs = [
  'cartoonist_id' => filter_var( $_GET('cartoonist_id'), FILTER_SANITIZE_NUMBER_INT ),
  'search' => filter_var( $_GET('search'), FILTER_SANITIZE_STRING )
];

$stmt = $pdo->prepare("SELECT cartoonists.name, cartoons.* FROM cartoonists 
                      INNER JOIN cartoons ON (cartoonists.id = cartoons.cartoonist_id)
                      WHERE cartoonists.id = :id AND cartoons.name LIKE '%:search%'");
$stmt->execute([':id' => $inputs['cartoonist_id'], ':search' => $inputs['search']]);


***********************************************************
3. จงเขียน sql query ที่มี sub query ในตำแหน่งต่างๆ อย่าง
น้อยสองแบบ (ตั้งชื่อตารางชื่อฟิลด์ด้วยตัวเองได้เลย)

Ans:
Table cartoonists (id, name)
Table cartoons (id, name, rating, cartoonist_id)
Table cartoon_type (id, name)

SELECT *,
      ( SELECT ROUND(AVG(rating), 2)
        FROM cartoons
        WHERE cartoonist_id = ctn.id
      ) AS cartoons_rating_avg
FROM cartoonists ctn
INNER JOIN (SELECT cartoons.*, cartoon_types.name AS cartoon_types 
            FROM cartoons 
            INNER JOIN cartoon_types 
            ON cartoons.cartoon_type_id = cartoon_types.id
        ) AS cartoons_all
ON (ctn.id = cartoons_all.cartoonist_id)
ORDER BY cartoons_rating_avg

** ผู้เขียน, แสดงรายชื่อการ์ตูน, คะแนนเฉลี่ยนการ์ตูนทั้งหมดของผู้เขียน

***********************************************************
4. จากตาราง tb_product(id,name,status,shop_id) และ
tb_shop(id,name) จงเขียน โค้ด select เพื่อแสดงสินค้าของร้าน ที่มีชื่อร้าน "rudy shop"

Ans:
SELECT tb_product.*, tb_shop.name AS shop_name FROM tb_product INNER JOIN tb_shop ON (tb_product.shop_id = tb_shop.id) WHERE tb_shop.name LIKE "%rudy shop%"

***********************************************************
5. เขียนคำสั่ง update สินค้าทุกตัวของร้าน "rudy shop" ให้
มี status='0'

Ans:
UPDATE tb_product SET status = '0' WHERE tb_product.shop_id = (SELECT id FROM tb_shop WHERE name LIKE "%rudy shop%")

***********************************************************
6. จงเขียน function ของ code sql เพื่อปรับรูปแบบการ select ข้อมูล ตามประเภทข้อมูลดังนี้เพื่อให้ได้ผลลัพธืดังตัวอย่าง
type date ให้แสดงผลเป็น dd/mm/YYYY
type float,double ให้แสดงผลเป็น x,xxx,xxx.xx (สามารถเขียนได้มากกว่า 2 ข้อที่ยกตัวอย่าง)

Ans.
SELECT DATE_FORMAT(created_at, "%d/%m/%Y") FROM tb_test

****currency**** 

***********************************************************
7. จงเขียน code function ในการคำนวณผลลัพธ์ใบเสนอราคาโดยหัวข้อมีดังนี้
ราคาสินค้ารวม = สามารถตั้งเองได้
ส่วนลดรวม = สามารถตั้งเองได้
ราคาสินค้าหลังส่วนลด
ภาษีมูลค่าเพิ่ม 7 %
ราคารวมสุทธิ

Ans: './ข้อที่7.js'

const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout,
});

const readLineAsync = msg => {
    return new Promise(resolve => {
        readline.question(msg, userRes => {
            resolve(userRes);
        });
    });
}

const startApp = async() => {
    const totalPrice = await readLineAsync(`กรอกราคาสินค้ารวม : `);
    const totalDiscount = await readLineAsync(`กรอกส่วนลดรวม : `);
    readline.close();
    const netPrice = totalPrice - totalDiscount
    const vat = netPrice * 7 / 100
    console.log(`ราคาสินค้าหลังส่วนลด : ${netPrice}`)
    console.log(`ภาษีมูลค่าเพิ่ม 7 % : ${vat}`)
    console.log(`ราคารวมสุทธิ : ${netPrice + vat}`)
}

startApp()

***********************************************************
